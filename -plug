#!/bin/bash


#########
# FUNCS #
#########

-cycle-argv() {
    local cmd=

    while [[ $argc -gt 0 ]]
    do
        -shift-argv
        cmd="$@ $arg"
        -run-cmd
    done
}


-defunc() {
    if [[ $DEBUG ]]
    then cat <<EOF

------------------------- CALLING --------------------------
$func
------------------------------------------------------------

EOF
    fi
}

-dry() {
    DRY_RUN=1
}

-exit() {
    -log "$1" "exit? yes."
}


-get-host-from-env() {
    for e in "${envs[@]}"
    do
        read re-env host <<< $e
        if [[ $1 =~ $re-env ]]
        then
            echo $host
            break
        fi
    done
}


-get-with-key() {
    echo "$2" | jq -r "$1"
}


-has-arg() {
    -search-argv "$1" 0
}


-has-prog() {
    for key in "${argv[@]}"
    do
        if [[ $key =~ $1 ]]
        then
            -log "key '$key' is a prog matching '$1'"
            return 0
        fi
    done

    return 1
}


-is-func() {
    declare -f -- "$1"
} >/dev/null


-log() {
    local msg=$1 _exit=$2
    echo "[LOG: $msg]"
    [[ -z $_exit ]] || exit 1
} >&2


-map-argv() {
    local list=()

    while [[ $argc -gt 0 ]]
    do
        -shift-argv
        list+=("$@$arg")
    done

    argv=("${list[@]}")
    argc=${#argv[@]}
}


-process() {
    [[ $# -eq 0 ]] || {
        argc=$#
        argv=("$@")
    }
    while -shift-argv
    do
        if -is-func "$arg"
        then
            func=$arg
            echo >&2 "[PROCESS: CALLING $func WITH ${argv[@]}]"
            $func ${argv[@]}
        else
            echo >&2 "[PROCESS: ERROR WITH FUNC; $arg?]"
            break
        fi
    done
}


-run-cmd() {
    local full_cmd=${cmd[@]}
    -log "$([[ -z $DRY_RUN ]] || echo "(DRY_RUN) ")$(eval "echo \"$full_cmd\"")"
    [[ $DRY_RUN ]] || eval "$full_cmd"
    cmd=()
}


-search-argv() {
    local key=$1
    local count=${2:-1}                     # i.e. how many args to retrieve
    local found= next= rest=

    arg=
    for ((i=0; i<argc; i++))
    do
        param=${argv[i]}
        if -is-func $param
        then
            -log "$FUNCNAME reached next program name: $param"
            break
        fi

        if [[ $param =~ $key ]]
        then
            found=1
            next=$((i+1))
            rest=$((next + count))
            if [[ $count -eq 0 ]]
            then arg=$param
            else arg=${argv[@]:next:count}
            fi
            argv=(
                "${argv[@]:0:i}"
                "${argv[@]:rest}"
            )
            argc=${#argv[@]}
            break
        fi
    done

    if [[ $found ]]
    then
        -log "found $key ($param)$mention_func; set arg to $arg"
        return 0
    else
        -log "$key not found$mention_func"
        return 255
    fi
}


-set-arg-to-var() {
    -shift-argv-into
}


-shift-argv-into() {
    -shift-argv

    -log "setting \$$1 to $arg"
    eval "$1=$arg"
}


-shift-argv() {
    -shift-argv "$@"
}

-shift-argv() {
    local n=${1-1}

    if [[ $argc -lt 1 ]]
    then
        arg=
        return 1
    else
        arg="${argv[@]:0:n}"
        argv=("${argv[@]:n}")
        argc=$((argc - n))
    fi
}


-unshift-argv() {
    argv+=("$@")
    argc=$((argc + $#))
}


########
# INIT #
########

[[ $# -eq 0 ]] || -process "$@"
