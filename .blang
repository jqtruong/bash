#!/bin/bash


#########
# FUNCS #
#########

_cycle_argv() {
    local cmd=

    while [[ $argc -gt 0 ]]
    do
        _shift_argv
        cmd="$@ $arg"
        _log "$cmd"
        eval "$cmd"
    done
}

_defunc() {
    if [[ $DEBUG ]]
    then cat <<EOF

------------------------- CALLING --------------------------
$func
------------------------------------------------------------

EOF
    fi
}

_get_host_from_env() {
    for e in "${envs[@]}"
    do
        read re_env host <<< $e
        if [[ $1 =~ $re_env ]]
        then
            echo $host
            break
        fi
    done
}

_get_with_key() {
    echo "$2" | jq -r "$1"
}

_has_arg() {
    _search_argv "$1" 0
}

_is_func() {
    declare -f "$1"
} >/dev/null

_log() {
    local msg=$1 do_exit=$2
    echo "[LOG: $msg]"
    [[ -z $do_exit ]] || exit 1
} >&2

_map_argv() {
    local list=()

    while [[ $argc -gt 0 ]]
    do
        _shift_argv
        list+=("$@$arg")
    done

    argv=("${list[@]}")
    argc=${#argv[@]}
}

_process() {
    while [[ $argc -gt 0 ]]
    do
        if _is_func ${argv[0]}
        then
            _shift_argv
            func=$arg
            echo >&2 "[PROCESS: CALLING $func WITH ${argv[@]}]"
            $func ${argv[@]}
        else
            echo >&2 "[PROCESS: ERROR WITH FUNC; ${argv[0]}?]"
            break
        fi
    done
}

_run_cmd() {
    local full_cmd=$(echo ${cmd[@]})
    _log "$full_cmd"
    [[ $DRY_RUN ]] || eval "${full_cmd//\&/\\&}"
}

_search_argv() {
    local key=$1
    local count=${2:-1} # i.e. how many args to retrieve
    local mentioned_func=$([[ -z $func ]] || echo " for $func")
    local found= next= rest=

    arg=
    for ((i=0; i<argc; i++))
    do
        param=${argv[i]}
        if _is_func $param
        then
            _log "$FUNCNAME reached next program name: $param"
            break
        fi

        if [[ $param =~ $key ]]
        then
            found=1
            next=$((i+1))
            rest=$((next + count))
            if [[ $count -eq 0 ]]
            then arg=$param
            else arg=${argv[@]:next:count}
            fi
            argv=(
                "${argv[@]:0:i}"
                "${argv[@]:rest}"
            )
            argc=${#argv[@]}
            break
        fi
    done

    if [[ $found ]]
    then
        _log "found $key ($param)$mention_func; set arg to $arg"
        return 0
    else
        _log "$key not found$mention_func"
        return 255
    fi
}

_set_arg_to_var() {
    _shift_argv

    _log "setting \$$1 to $arg"
    eval $1=$arg
}

_shift_argv() {
    local n=${1-1}

    arg="${argv[@]:0:n}"
    argv=("${argv[@]:n}")
    argc=$((argc - n))
}

_unshift_argv() {
    argv+=("$@")
    argc=$((argc + $#))
}


########
# INIT #
########
